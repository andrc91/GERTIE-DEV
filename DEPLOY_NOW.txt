# DEPLOYMENT via sync_to_slaves.sh ONLY

Date: October 15, 2025 12:00
Commit: 80346eb (Instrumentation: Performance metrics)

## CRITICAL: INSTRUMENTATION DEPLOYMENT
Previous architectural fixes could not be debugged due to insufficient logging.
This deployment adds comprehensive instrumentation to verify fixes are working.

## WHAT CHANGED:
**Instrumentation #1 (d54c015): Rep8 Event Logging**
- Precise timestamps for all Event operations (SET/CLEAR)
- Event.wait() timing (before/after with elapsed time)
- Capture cycle timing (total duration)
- Success/timeout result logging
- Prefixes: [EVENT], [EVENT-WAIT], [EVENT-RESULT], [TIMING]

**Instrumentation #2 (80346eb): GUI Performance Metrics**  
- Frame counters: received, queued, skipped per camera
- Performance logging every 10 seconds
- Per-camera FPS and skip rate
- Queue efficiency metrics (% reduction)
- Prefix: [PERF]

## MANDATORY STEPS (NO ALTERNATIVES):
1. Copy camera_system_integrated_final to USB
2. On control1: cp -r /media/USB/camera_system_integrated_final /home/andrc1/
3. cd /home/andrc1/camera_system_integrated_final
4. ./sync_to_slaves.sh
5. ./run_gui_with_logging.sh
6. **PERFORM INSTRUMENTED TESTING** (see below)
7. cp /home/andrc1/Desktop/updatelog.txt /media/USB/
8. Return updatelog.txt to MacBook

## INSTRUMENTED TESTING PROTOCOL:

### Phase 1: Baseline (30 seconds)
**Objective**: Collect baseline performance data

1. Start GUI, wait for all 8 cameras streaming
2. Let run for 30 seconds in grid mode
3. **Watch for**: [PERF] logs every 10 seconds in terminal
4. **Expected**: FPS, skip rates, queue efficiency displayed
5. **Note**: Record approximate FPS and skip % for each camera

### Phase 2: Rep8 Capture Test (CRITICAL)
**Objective**: Verify Event synchronization with full visibility

1. Click "Capture All" button once
2. **Watch terminal for**:
   - `[EVENT] stream_stopped_event CLEARED at [time]` (capture function)
   - `[EVENT-WAIT] Waiting for stream_stopped_event...` (capture waiting)
   - `[EVENT] stream_stopped_event SET at [time]` (streaming cleanup)
   - `[EVENT-RESULT] stream_stopped_event RECEIVED in X.XXs - SUCCESS` (or TIMEOUT)
   - `[TIMING] Capture cycle START at [time]`
   - `[EVENT] capture_complete_event SET at [time]` (after capture done)
   - `[EVENT-WAIT] Waiting for capture_complete_event...` (restart waiting)
   - `[EVENT-RESULT] capture_complete_event RECEIVED in X.XXs - SUCCESS` (or TIMEOUT)
   - `[TIMING] Capture cycle COMPLETE in X.XXs`
3. **Watch rep8 video**: Should pause during capture, resume within 5-10 seconds
4. **Repeat**: Capture 2 more times (total 3 cycles)

### Phase 3: GUI Responsiveness Observation
**Objective**: Subjective feel + objective metrics

1. Continue streaming all 8 cameras for 30 seconds
2. Move mouse around GUI
3. Click buttons (exclusive view changes)
4. **Watch terminal**: [PERF] logs should show queue efficiency
5. **Expected**: High skip rates (80-90%) = queue gating working

## SUCCESS CRITERIA (WITH DATA):

### Rep8 Event Synchronization:
✅ All Event logging appears in updatelog.txt  
✅ No TIMEOUT messages in [EVENT-RESULT] logs  
✅ Event timing under 1 second for both events  
✅ Capture cycle completes in 5-10 seconds total  
✅ Rep8 video resumes automatically after each capture  
✅ 3/3 capture cycles successful

### GUI Performance Metrics:
✅ [PERF] logs appear every 10 seconds  
✅ Skip rate 80-90% (proves queue gating working)  
✅ FPS approximately 3-4 per camera in grid mode  
✅ Total queued calls ~24/sec (vs 240/sec without fix)  
✅ GUI feels responsive (subjective + metrics support)

## FAILURE INDICATORS (WITH DATA):

### Rep8 Issues:
❌ [EVENT-RESULT] shows TIMEOUT instead of SUCCESS  
❌ Event timing >5 seconds (something blocking)  
❌ Capture cycle >15 seconds total  
❌ Rep8 video stays frozen after any capture  
❌ Missing Event logs entirely (code didn't deploy)

### GUI Issues:
❌ Skip rate <50% (queue gating not working)  
❌ FPS >10 per camera (not rate limiting)  
❌ Total queued >100/sec (no reduction achieved)  
❌ No [PERF] logs (instrumentation didn't deploy)  
❌ GUI still laggy despite good metrics (bottleneck elsewhere)

## ANALYSIS APPROACH:

### If Rep8 Event Logs Show SUCCESS But Still Freezes:
→ Event synchronization working, problem is elsewhere (Picamera2 issue, threading bug, etc.)  
→ Need to investigate Picamera2 lifecycle  
→ May need module-level picam2 reference

### If Rep8 Event Logs Show TIMEOUT:
→ Events not being set by cleanup code  
→ Check for exceptions in streaming thread finally block  
→ May need longer timeouts or different sync mechanism

### If GUI Skip Rate <50%:
→ update_pending flag not working as designed  
→ Check flag is being set/cleared correctly  
→ May need to debug flag state

### If GUI Skip Rate 80-90% But Still Laggy:
→ Queue gating working, bottleneck is elsewhere  
→ Likely PhotoImage creation or Tkinter rendering  
→ Need to move image processing to background thread

### If No Instrumentation Logs Appear:
→ Code didn't deploy or wrong version running  
→ Check commit hash matches  
→ Verify sync_to_slaves.sh completed successfully

## CRITICAL LOG COLLECTION:

The updatelog.txt MUST contain:
1. Deployment confirmation (sync_to_slaves.sh output)
2. GUI startup logs
3. [PERF] metrics (multiple cycles)
4. [EVENT] synchronization traces (all 3 capture cycles)
5. [EVENT-WAIT] and [EVENT-RESULT] for all waits
6. [TIMING] for complete capture cycles
7. Any ERROR or WARNING messages

Without complete logs, cannot perform analysis.

## DO NOT:
- Use any other deployment method
- Run individual scp commands  
- Modify sync_to_slaves.sh
- Skip logging collection
- Test for less than 3 capture cycles

## POST-TEST ACTIONS:

After collecting updatelog.txt with full instrumentation:
1. Return to MacBook
2. Execute GERTIE Phase 6 (detailed log analysis)
3. Determine next steps based on hard data:
   - If Events work + GUI metrics good: Investigate user perception vs reality
   - If Events timeout: Fix Event synchronization approach
   - If GUI metrics bad: Fix queue gating implementation
   - If metrics good but still issues: Investigate deeper bottlenecks

## NOTES:
- Instrumentation adds ~86 lines of logging
- Performance overhead: Negligible (logging only)
- Log prefixes enable easy grep filtering for analysis
- This deployment provides VISIBILITY to debug previous fixes
- Expected result: Data-driven decisions on next steps
